{"version":3,"sources":["components/AddCategory.tsx","helpers/getImgFetch.tsx","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/useFetchGifs.tsx","components/GifExpertApp.tsx","index.tsx"],"names":["AddCategory","props","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","_useState3","_useState4","categoryExists","setCategoryExists","react_default","a","createElement","onSubmit","e","preventDefault","trim","length","setCategories","value","some","toLowerCase","concat","toConsumableArray","type","onChange","currentTarget","className","getImgFetch","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","category","imagesData","_yield$imagesData","data","wrap","_context","prev","next","fetch","encodeURI","sent","json","t0","meta","msg","abrupt","map","_ref2","id","title","img","images","downsized_medium","url","stop","_x","apply","this","arguments","GifGridItem","src","alt","GifGrid","_useFetchGifs","loading","state","setState","useEffect","then","useFetchGifs","Fragment","components_GifGridItem","assign","key","GifExpertApp","Categories","link","loc","window","location","href","origin","target","textContent","components_AddCategory","onClick","array","pop","components_GifGrid","ReactDOM","createRoot","document","getElementById","render","StrictMode","components_GifExpertApp"],"mappings":"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","file":"static/js/main.4d044117.chunk.js","sourcesContent":["import React, {SetStateAction, useState} from 'react';\r\n\r\ninterface Categories{\r\n    setCategories: React.Dispatch<SetStateAction<string[]>>\r\n}\r\n\r\n/**\r\n *\r\n * @param props\r\n * @constructor\r\n */\r\n\r\nconst AddCategory = (props: Categories) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [categoryExists, setCategoryExists] = useState('');\r\n\r\n    /**\r\n     *\r\n     * @param e Recibe como argumento el evento del Form\r\n     * @return {void} Always return void\r\n     */\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        /*Necesita ser una función u operación pura\r\n        La cual no modifique el arreglo directamente*/\r\n        if (inputValue.trim().length > 2){\r\n            props.setCategories((value) => {\r\n                if(!value.some(\r\n                        (value) =>\r\n                            value.toLowerCase() === inputValue.toLowerCase()\r\n                    )\r\n                ){\r\n                    setCategoryExists('');\r\n                    return [inputValue, ...value];\r\n                }\r\n                setCategoryExists('The category exists');\r\n                return value;\r\n            });\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n      setInputValue(e.currentTarget.value);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>Add Category</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <input type=\"submit\"/>\r\n                <span className={'errorCategory'}>{categoryExists}</span>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddCategory;","import {Welcome3} from \"../components/GifGrid.type\";\r\n\r\nconst getImgFetch = async (category: string) => {\r\n\r\n    const imagesData: Promise<Welcome3> = (await fetch(`https://api.giphy.com/v1/gifs/search?api_key=WxzSBMFxIG303SwcpYswQ2l2VW3nhyWA&q=${encodeURI(category)}&limit=10`)).json();\r\n\r\n    if ((await imagesData).meta.msg === \"OK\"){\r\n\r\n        const {data} = (await imagesData);\r\n\r\n        return data.map(({id, title, images}) => (\r\n            {\r\n                id: id,\r\n                title: title,\r\n                img: images.downsized_medium.url,\r\n            }\r\n        ));\r\n    }\r\n    return [];\r\n}\r\n\r\nexport default getImgFetch;\r\n","import React from 'react';\r\n\r\ninterface imgProps{\r\n    title: string,\r\n    img: string\r\n}\r\n\r\nconst GifGridItem: React.FC<imgProps> = ({img, title}) => {\r\n    return (\r\n        <div className={\"card\"}>\r\n            <img className={\"gifs animate__animated animate__fadeInLeft\"} src={img} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React/*, {useEffect, useState}*/ from 'react';\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\n\r\n\r\nconst GifGrid = ({category} : {category: string}) => {\r\n\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 id={category}>{category}</h3>\r\n            {loading && <p className={'loading animate__animated'}>Loading...</p>}\r\n            <div className={\"card-grid\"}>\r\n\r\n                {images.map((value) =>\r\n                    (\r\n                        <GifGridItem key={value.id} {...value}/>\r\n                    )\r\n                )}\r\n\r\n            </div>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React, {useEffect, useState} from 'react';\r\nimport getImgFetch from \"../helpers/getImgFetch\";\r\n\r\ninterface imgProps{\r\n    title: string,\r\n    img: string,\r\n    id: string\r\n}\r\n\r\ntype FetchGifsObject = {\r\n    data: imgProps[],\r\n    loading: boolean\r\n}\r\n\r\nconst useFetchGifs = (category: string) => {\r\n\r\n    const [state, setState] = useState<FetchGifsObject>({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getImgFetch(category).then((value) => setState({\r\n            data: value,\r\n            loading: false\r\n        }))\r\n    }, [category]);\r\n\r\n\r\n    return state;\r\n};\r\n\r\nexport {\r\n    useFetchGifs\r\n};\r\n","import React, {useState} from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [Categories, setCategories] = useState(['Sonic X']);\r\n\r\n    const link = (e: React.SyntheticEvent) => {\r\n        const loc = window.location;\r\n        window.location.href = `${loc.origin}/#${(e.target as HTMLUListElement).textContent}`;\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        setCategories((value) => {\r\n            const array = [...value];\r\n            array.pop();\r\n            return array;\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2\r\n                className={'animate__animated Title'}\r\n            >GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ul id={\"listMoreSearch\"}>\r\n                {Categories.map((value) => {\r\n                    return (\r\n                        <li key={value} onClick={link}>{value}</li>\r\n                    );\r\n                })}\r\n            </ul>\r\n\r\n            {\r\n                Categories.length !== 0\r\n                &&\r\n                <button onClick={handleDelete}>Delete last category</button>\r\n            }\r\n\r\n            {\r\n                Categories.length !== 0\r\n                    ?\r\n                    <h3>List: </h3>\r\n                    :\r\n                    <h3>No items to display, please add a new category.</h3>\r\n            }\r\n\r\n            <ul className={\"category\"}>\r\n                {Categories.map((value) =>\r\n                    (\r\n                        <li key={value} onClick={link}><GifGrid category={value}/></li>\r\n                    )\r\n                )}\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport GifExpertApp from \"./components/GifExpertApp\";\r\nimport './styles/index.css';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\n\r\nroot.render(\r\n    <React.StrictMode>\r\n        <GifExpertApp/>\r\n    </React.StrictMode>\r\n\r\n);\r\n\r\n"],"sourceRoot":""}